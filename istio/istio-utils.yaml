curl --data "username=admin&password=admin&grant_type=password&client_id=admin-cli" http://keycloak.keycloak-ns:8080/auth/realms/master/protocol/openid-connect/token

curl --data "username=admin&password=admin&grant_type=password&client_id=admin-cli" http://127.0.0.1:30080/auth/realms/master/protocol/openid-connect/token

curl --data "username=admin&password=admin&grant_type=password&client_id=admin-cli" http://keycloak.keycloak-ns:8080/auth/realms/master/protocol/openid-connect/certs

curl   http://keycloak.keycloak-ns.svc.cluster.local:8080/auth/realms/master/protocol/openid-connect/certs


curl --data "username=admin&password=admin&grant_type=password&client_id=kubernetes-cluster" http://127.0.0.1:30080/auth/realms/master/protocol/openid-connect/token | jq -r '.access_token'
  
  
  {
	"issuer": "http://localhost:30080/auth/realms/master",
	"authorization_endpoint": "http://localhost:30080/auth/realms/master/protocol/openid-connect/auth",
	"token_endpoint": "http://localhost:30080/auth/realms/master/protocol/openid-connect/token",
	"token_introspection_endpoint": "http://localhost:30080/auth/realms/master/protocol/openid-connect/token/introspect",
	"userinfo_endpoint": "http://localhost:30080/auth/realms/master/protocol/openid-connect/userinfo",
	"end_session_endpoint": "http://localhost:30080/auth/realms/master/protocol/openid-connect/logout",
	"jwks_uri": "http://localhost:30080/auth/realms/master/protocol/openid-connect/certs",
	"check_session_iframe": "http://localhost:30080/auth/realms/master/protocol/openid-connect/login-status-iframe.html",
	"grant_types_supported": ["authorization_code", "implicit", "refresh_token", "password", "client_credentials"],
	"response_types_supported": ["code", "none", "id_token", "token", "id_token token", "code id_token", "code token", "code id_token token"],
	"subject_types_supported": ["public", "pairwise"],
	"id_token_signing_alg_values_supported": ["ES384", "RS384", "HS256", "HS512", "ES256", "RS256", "HS384", "ES512", "RS512"],
	"userinfo_signing_alg_values_supported": ["ES384", "RS384", "HS256", "HS512", "ES256", "RS256", "HS384", "ES512", "RS512", "none"],
	"request_object_signing_alg_values_supported": ["ES384", "RS384", "ES256", "RS256", "ES512", "RS512", "none"],
	"response_modes_supported": ["query", "fragment", "form_post"],
	"registration_endpoint": "http://localhost:30080/auth/realms/master/clients-registrations/openid-connect",
	"token_endpoint_auth_methods_supported": ["private_key_jwt", "client_secret_basic", "client_secret_post", "client_secret_jwt"],
	"token_endpoint_auth_signing_alg_values_supported": ["RS256"],
	"claims_supported": ["sub", "iss", "auth_time", "name", "given_name", "family_name", "preferred_username", "email"],
	"claim_types_supported": ["normal"],
	"claims_parameter_supported": false,
	"scopes_supported": ["openid", "address", "email", "offline_access", "phone", "profile", "roles", "web-origins"],
	"request_parameter_supported": true,
	"request_uri_parameter_supported": true,
	"code_challenge_methods_supported": ["plain", "S256"],
	"tls_client_certificate_bound_access_tokens": true,
	"introspection_endpoint": "http://localhost:30080/auth/realms/master/protocol/openid-connect/token/introspect"
}
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   
  
 kubectl  port-forward  $(kubectl get pod -n istio-system -l app=kiali   -o jsonpath='{.items[0].metadata.name}')   -n istio-system 20001
 
 kubectl -n istio-system port-forward $(kubectl -n istio-system get pod -l app=grafana -o jsonpath='{.items[0].metadata.name}') 3000:3000
 
 kubectl port-forward -n istio-system $(kubectl get pod -n istio-system -l app=jaeger -o jsonpath='{.items[0].metadata.name}') 16686:16686
 
 kubectl -n istio-system port-forward $(kubectl -n istio-system get pod -l app=prometheus -o jsonpath='{.items[0].metadata.name}') 9090:9090
 
 kubectl -n istio-system port-forward $(kubectl get pod -l app=zipkin -o jsonpath='{.items[0].metadata.name}') 9411:9411

 kubectl -n istio-system  port-forward svc/zipkin 9411:9411
 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  
---  
 kubectl apply -f - <<EOF
 apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: authenticationrequest
  namespace: default
spec:
  selector:
    matchLabels:
      app: enterprise
  jwtRules:
  - issuer: "http://keycloak.keycloak-ns:8080/auth/realms/master"
    jwksUri: "http://keycloak.keycloak-ns.svc.cluster.local:8080/auth/realms/master/protocol/openid-connect/certs"
	EOF
---  
 kubectl apply -f - <<EOF
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: authorizationpolicy
  namespace: default
spec:
  selector:
    matchLabels:
      app: enterprise
  action: ALLOW
  rules:
  - from:
    - source:
       requestPrincipals: ["http://keycloak.keycloak-ns:8080/auth/realms/master"] 
	EOF
--- 


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  
---  
 kubectl apply -f - <<EOF
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: "authenticationrequest"
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  jwtRules:
  - issuer: "http://localhost:30080/auth/realms/master"
    jwksUri: "http://localhost:30080/auth/realms/master/protocol/openid-connect/certs"
    forwardOriginalToken: true
    outputPayloadToHeader: x-jwt-payload
	EOF
---
 kubectl apply -f - <<EOF
apiVersion: "security.istio.io/v1beta1"
kind: "AuthorizationPolicy"
metadata:
  name: "authorizationpolicy"
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  action: DENY
  rules:
  - from:
    - source:
        notRequestPrincipals: ["*"]
  principalBinding: USE_ORIGIN
	EOF
--- 


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 kubectl apply -f - <<EOF
apiVersion: "security.istio.io/v1beta1"
kind: "RequestAuthentication"
metadata:
  name: "authenticationrequest"
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  jwtRules:
  - issuer: "testing@secure.istio.io"
    jwksUri: "https://raw.githubusercontent.com/istio/istio/release-1.8/security/tools/jwt/samples/jwks.json"
EOF

 kubectl apply -f - <<EOF
apiVersion: "security.istio.io/v1beta1"
kind: "AuthorizationPolicy"
metadata:
  name: "authorizationpolicy"
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  action: DENY
  rules:
  - from:
    - source:
        notRequestPrincipals: ["*"]
EOF
 

 TOKEN=$(curl https://raw.githubusercontent.com/istio/istio/release-1.8/security/tools/jwt/samples/demo.jwt -s)
 
 for i in $(seq 1 10); do curl --header "Authorization: Bearer deadbeef" "http://127.0.0.1/enterprise/enterprises/" -s -o /dev/null -w "%{http_code}\n"; sleep 1; done

 for i in $(seq 1 100000); do curl  "http://127.0.0.1/enterprise/enterprises/" -s -o /dev/null -w "%{http_code}\n"; sleep 1; done
 
 for i in $(seq 1 100000); do curl  "http://127.0.0.1/corporate/corporates/" -s -o /dev/null -w "%{http_code}\n"; sleep 1; done
 
 seq 10000 | parallel --max-args 0 --jobs 100 "curl http://127.0.0.1/corporate/corporates/"
  seq 10000 | parallel --max-args 0 --jobs 100 "curl http://127.0.0.1/corporate/corporates/"



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 kubectl apply -f - <<EOF
apiVersion: "security.istio.io/v1beta1"
kind: "RequestAuthentication"
metadata:
  name: "authenticationrequest"
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  jwtRules:
  - issuer: "https://dev-69mun6gq.us.auth0.com/"
    jwksUri: "https://dev-69mun6gq.us.auth0.com/.well-known/jwks.json"
EOF

 kubectl apply -f - <<EOF
apiVersion: "security.istio.io/v1beta1"
kind: "AuthorizationPolicy"
metadata:
  name: "authorizationpolicy"
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  action: DENY
  rules:
  - from:
    - source:
        notRequestPrincipals: ["*"]
EOF

curl --request POST \
  --url https://dev-69mun6gq.us.auth0.com/oauth/token \
  --header 'content-type: application/json' \
  --data '{"client_id":"NNsGJGBcj8b38fxpH1Wsz7Sl3xwlZzSj","client_secret":"cfatTjhNedaXEfjyhj5AF_caU0RAH37sfSPmsKx80rDMhIzyTD-jl2FB-mUjQrgs","audience":"https://dev-69mun6gq.us.auth0.com/api/v2/","grant_type":"client_credentials"}'
     
{"access_token":"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlA4bHNBT0NMcktTYXBQSDE1UmVBQSJ9.eyJpc3MiOiJodHRwczovL2Rldi02OW11bjZncS51cy5hdXRoMC5jb20vIiwic3ViIjoiTk5zR0pHQmNqOGIzOGZ4cEgxV3N6N1NsM3h3bFp6U2pAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vZGV2LTY5bXVuNmdxLnVzLmF1dGgwLmNvbS9hcGkvdjIvIiwiaWF0IjoxNjA0ODM3MjcxLCJleHAiOjE2MDQ5MjM2NzEsImF6cCI6Ik5Oc0dKR0JjajhiMzhmeHBIMVdzejdTbDN4d2xaelNqIiwiZ3R5IjoiY2xpZW50LWNyZWRlbnRpYWxzIn0.mm613-cW6PMGcGsXhNBwRo252WEJf4hHgf2TysikYJmEHM5ZeeTTznoq0jSOJ0uw4EJnPOBn8yga7MtZHIaZTq4kketnZTstyekrjjnOU3ZOpk11AUH4gyTt6IORupmecocqAeAro57erhpWjEVR8Xf7fPAw7Gz6TlLU4dkRPPCDJ3UPtYH2hTdxYl6mLTUcuxDTTTfAgU9AXKpVS0l7Qg0GF0KlYtJbUUJf9oimotYV7d8lIfqAMCF85vcyTiOhVxvUoEAuvYOzNyWMsz_f5rRI7dsmnhFK2jDnfouAerTvLwAHdNPGKaLUdfw_Lr4tLvr0qGO8aTlPmrNeVoZlIQ","expires_in":86400,"token_type":"Bearer"}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


gitlab-runner register -n   --url https://gitlab.com/  
 --registration-token nsrW5ZxddT7syY8gRn43  
 --executor docker  
 --description "JAMES MEDICI Docker Runner" 
 --docker-image "docker:20.10.0"   
 --docker-privileged  
 --docker-volumes "/certs/client"
v20.10.0


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


git clone https://github.com/GoogleCloudPlatform/istio-samples.git \
  ~/istio-samples
  
  
  kubectx gke
kubectl apply -f ~/istio-samples/istio-canary-gke/canary/destinationrule.yaml
kubectl apply -f ~/istio-samples/istio-canary-gke/canary/productcatalog-v2.yaml
kubectl apply -f ~/istio-samples/istio-canary-gke/canary/vs-split-traffic.yaml
